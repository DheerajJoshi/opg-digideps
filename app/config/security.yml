parameters:
    # set this param to a higher value than session_expire_seconds on the client
    user_provider_timeout_seconds: 3901
    
services:
    # authenticator
    authenticator.token_header:
        class: AppBundle\Service\Auth\HeaderTokenAuthenticator
        public: false
    user_provider:
        class: AppBundle\Service\Auth\UserProvider
        arguments: [ @em, @snc_redis.default, @logger, { "timeout_seconds": "%user_provider_timeout_seconds%" } ]
    authService:
        class: AppBundle\Service\Auth\AuthService
        arguments: [ @service_container ]
    attemptsChecker.returnCode:
        class:  AppBundle\Service\BruteForce\AttemptsInTimeChecker
        arguments: [ @snc_redis.default ]
        calls:
            - [ setRedisPrefix, ["ac_ret_code"] ]
            # after 5 attempts in the last 10 minutes, return a different return code (activate captcha)
            - [ addTrigger, [  5, 600 ] ]
    attemptsChecker.exception:
        class:  AppBundle\Service\BruteForce\AttemptsIncrementalWaitingChecker
        arguments: [ @snc_redis.default ]
        calls:
            - [ setRedisPrefix, ["ac_exception"] ]
            # after 10 attempts, freeze for 10 minutes
            - [ addFreezingRule, [  10, 600 ] ]
            # after further 10 attempts. freeze for 20 minutes
            - [ addFreezingRule, [  20, 1200 ] ]
            # after further 10 attempts. freeze for 60 minutes
            - [ addFreezingRule, [  30, 3600 ] ]
            
    bruteForceChecker:
        class: AppBundle\Service\Auth\BruteForceChecker
        arguments: [ @snc_redis.default, @logger ]
        calls:
            # email checks
            - [ addWarningTrigger, [ "email", 5]]
            - [ addDelayTriggers, [ "email", {10: 2, 15: 5, 20: 30, 25: 60, 30: 120, 35: 300, 40: 600}]]
            # token checks (stricter, only delay)
            - [ addDelayTrigger, [ "token", {3: 2, 6: 20, 10: 60}]]
    
    
    
    
security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User: sha512
       
    
    providers:
        user_provider_redis:
            id: user_provider

    firewalls:
        elb:
            pattern: ^/manage/
            security: false
            methods: [GET]
        # disabled at the controller level if "behat_controller_enabled" param is equal to false
        behat:
            pattern: ^/behat/
            security: false
        login:
            pattern:  ^/auth/login$
            security: false
            methods: [POST]
        userRecreateToken:
            pattern: ^/user/recreate-token
            security: false
            methods: [PUT]
        userGetByToken:
            pattern: ^/user/get-by-token
            security: false
            methods: [GET]
        selfregister:
            pattern: ^/selfregister
            security: false
            methods: [POST]
        # keep this one last so that the previous ones bypass the catch-all pattern below
        default:
            pattern: .*
            security: true
            simple_preauth:
                authenticator: authenticator.token_header
            provider: user_provider_redis
            stateless:   true
            
#    access_control:
#        - { path: ^/audit-log, roles: [ROLE_ADMIN, IS_AUTHENTICATED_FULLY] }
#    role_hierarchy:
#        ROLE_LAY_DEPUTY: []
#        ROLE_ADMIN: [ ]

        
        
