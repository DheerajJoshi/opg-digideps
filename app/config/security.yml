services:
    # authenticator using key from request headers
    token_header_authenticator:
        class: AppBundle\Service\HeaderTokenAuthenticator
        public: false
    # provider
    get_user_by_token_provider:
        class: AppBundle\Service\GetUserByTokenProvider
        arguments: [  @em, { "timeout_seconds": 1800 } ]

security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User: sha512
       

#    role_hierarchy:
#        ROLE_LAY_DEPUTY: []
#        ROLE_PROFESSIONAL_DEPUTY: []
#        ROLE_LOCAL_AUTHORITY_DEPUTY: []
#        ROLE_ADMIN: [ ROLE_ALLOWED_TO_SWITCH, ROLE_GUEST, ROLE_LAY_DEPUTY, ROLE_PROFESSIONAL_DEPUTY, ROLE_LOCAL_AUTHORITY_DEPUTY, ROLE_VISITOR ]

    providers:
        get_user_by_token_provider:
            id: get_user_by_token_provider

    firewalls:
        # all the request goes through the token_header_authenticator that needs the HEADER token
        # the provider gets the user by token from the db/redis
       
            
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        elb:
            pattern: ^/manage/
            security: false
            
        login:
            pattern:  ^/auth/login$
            security: false
        
        # keep this one last so that the previous ones bypass the catch-all pattern below
        default:
            pattern: .*
            security: true
            simple_preauth:
                authenticator: token_header_authenticator
            provider: get_user_by_token_provider
            stateless:   true
            
#    access_control:
#        #temp. REMOVEME
#        - { path: ^/user/get-all, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/manage , roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/ , roles: IS_AUTHENTICATED_FULLY }
        
        
