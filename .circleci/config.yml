version: 2.1

workflows:
  pull_request:
    jobs:
      - build:
          name: build pr
          semver_stage: --stage dev
          filters: { branches: { ignore: [ master ] } }

      - plan:
          filters: { branches: { ignore: [ master ] } }
  master:
    jobs:
      - build:
          name: build master
          filters: { branches: { only: [ master ] } }

      - apply:
          name: apply development
          requires: [ build master ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: development

      - apply:
          name: apply master
          requires: [ apply development ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

      - test:
          name: test master
          requires: [ apply master ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

orbs:
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  plan:
    docker:
      - image: hashicorp/terraform:full
    environment:
      TF_CLI_ARGS_plan: -input=false -lock=false
      TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
    steps:
      - checkout
      - run:
          name: terraform lint
          command: terraform fmt -diff -check -recursive
      - run:
          name: init shared
          command: terraform init shared
      - run:
          name: plan shared
          environment:
            TF_WORKSPACE: development
          command: terraform plan -var-file=shared/terraform.tfvars.json shared
      - run:
          name: init environment
          command: terraform init environment
      - run:
          name: plan environment
          environment:
            TF_WORKSPACE: master
            TF_VAR_OPG_DOCKER_TAG: dummy_value
          command: terraform plan -var-file=environment/terraform.tfvars.json environment
  apply:
    docker:
      - image: hashicorp/terraform:full
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
      tf_tier:
        description: tier to apply - shared or environment
        default: environment
        type: string
    environment:
      TF_CLI_ARGS_plan: -input=false -lock=false
      TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
      TF_TIER: << parameters.tf_tier >>
      TF_WORKSPACE: << parameters.tf_workspace >>
      TF_VAR_OPG_DOCKER_TAG: dummy_value
    steps:
      - checkout
      - run:
          name: init
          command: terraform init ${TF_TIER}
      - run:
          name: plan
          command: terraform plan -var-file=${TF_TIER}/terraform.tfvars.json ${TF_TIER}
  test:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
    environment:
      TF_WORKSPACE: << parameters.tf_workspace >>
      TF_VAR_default_role: digideps-ci
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Reset database
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} reset-database-${TF_WORKSPACE}
      - run:
          name: Test API
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-api-${TF_WORKSPACE}
      - run:
          name: Test Client
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-front-${TF_WORKSPACE}

  build:
    docker:
      - image: circleci/python:2.7
    parameters:
      semver_stage:
        description: semver stage suffix
        default: ""
        type: string
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - setup_remote_docker
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - 6f:4b:55:76:0e:cd:27:7d:ad:c3:28:38:53:69:5c:32
      - checkout
      - run:
          name: Install semvertag
          command: sudo pip install https://github.com/ministryofjustice/semvertag/archive/master.zip
      - run:
          name: Set next version
          command: echo "export VERSION=$(semvertag bump patch << parameters.semver_stage >>)" >> $BASH_ENV
      - run:
          name: Docker login
          command: eval $(aws ecr get-login --region $AWS_REGION --no-include-email --profile digideps-ci)
      - run:
          name: Build api image
          command: docker build -t ${AWS_REGISTRY}/digideps/api:${VERSION} api
      - run:
          name: Build client image
          command: docker build -t ${AWS_REGISTRY}/digideps/client:${VERSION} client
      - run:
          name: Push api image
          command: docker push ${AWS_REGISTRY}/digideps/api:${VERSION}
      - run:
          name: Push client image
          command: docker push ${AWS_REGISTRY}/digideps/client:${VERSION}
      - run:
          name: Tag git
          command: git tag ${VERSION}
      - run:
          name: Push git tags
          command: git push --tags
