
@startuml
    !define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/master/dist

    !include AWSPuml/AWSCommon.puml
    !include AWSPuml/AWSSimplified.puml

    !include AWSPuml/Compute/all.puml
    !include AWSPuml/Database/all.puml
    !include AWSPuml/DeveloperTools/all.puml
    !include AWSPuml/General/all.puml
    !include AWSPuml/NetworkingAndContentDelivery/all.puml
    !include AWSPuml/Storage/all.puml
    !include AWSPuml/ManagementAndGovernance/all.puml

    'top to bottom direction


    skinparam rectangle {
        BorderColor transparent
        Shadowing false
    }
    package "amazon" {
        EC2ContainerRegistryResource(digideps_registry, "digideps_registry",)
        S3Bucket(backup_bucket, "backup",)
        S3Bucket(pa_uploads_bucket, "pa-uploads",)
        S3Bucket(ecr_images_bucket, "ecr images",)


        rectangle {
            SimpleStorageServiceS3(s3,"S3",)
            ElasticContainerService(ecr,"ECR",)
            CloudWatch(cw,"Cloudwatch",)
        }
    }
    package "public" {
        VPCNATGateway(nat, "nat",)
        package "loadbalancers" {
            ELBApplicationLoadBalancer(admin_lb,"admin",)
            ELBApplicationLoadBalancer(front_lb,"front",)
        }
    }
    package "private" {
        Cloud9(internal,"internal",)
        package "frontend" {
            ECSService(front_service,"front",)
            ECSService(admin_service,"admin",)
            ElastiCacheForRedis(admin_redis,"admin",)
            ElastiCacheForRedis(front_redis,"front",)

        }
        package "backend" {
            ECSService(scan_service,"scan",)
            ECSService(api_service,"api",)
            ECSService(pdf_service,"pdf",)
            ElastiCacheForRedis(api_redis,"api",)
        }
        RDSPostgreSQLinstance(rds,"rds",)
        package "tasks" {
            ECSService(backup_task,"backup",)
            ECSService(restore_task,"restore",)
            ECSService(reset_database_task,"reset_database",)
            ECSService(api_unit_test_task,"api_unit_test",)
            ECSService(integration_test_task,"integration_test",)
            ECSService(client_unit_test_task,"client_unit_test",)
        }
    }
    rectangle {
        VPCEndpoints(ecr_endpoint, "ecr-endpoint",)
        VPCEndpoints(s3_endpoint, "S3-endpoint",)
        VPCEndpoints(logs_endpoint, "logs-endpoint",)
    }

    InternetAlt1(whitelist, "whitelisted ips",)

    whitelist -[#blue]down-> admin_lb: HTTPS
    whitelist -[#blue]down-> front_lb: HTTPS, HTTP

    admin_lb -[#blue]down---> admin_service: HTTPS
    front_lb -[#blue]down---> front_service: HTTPS

    front_service -[#blue]> api_service: HTTPS
    front_service -[#green]left-> front_redis: TCP:6379
    front_service -[#red]> scan_service: TCP:8443

    admin_service -[#blue]down-> api_service: HTTPS
    admin_service -[#green]left-> admin_redis: TCP:6379

    front_service -[#red]> pdf_service: HTTP
    admin_service -[#red]> pdf_service: HTTP

    api_unit_test_task -[#green]> api_redis: TCP:6379
    api_unit_test_task -[#purple]> rds: TCP:5432

    integration_test_task -[#blue]up-> nat: HTTPS
    integration_test_task -[#purple]> rds: TCP:5432

    api_service -[#purple]> rds: TCP:5432
    api_service -[#green]> api_redis: TCP:6379

    loadbalancers <-[#blue]left- nat: HTTPS
    backup_task -[#purple]-> rds: TCP:5432
    reset_database_task -[#purple]-> rds: TCP:5432
    restore_task -[#purple]-> rds: TCP:5432

    internal -[#purple]> rds: TCP:5432

    private -[#blue]-> logs_endpoint: HTTPS
    logs_endpoint -[#blue]-> cw: HTTPS

    private -[#blue]-> ecr_endpoint: HTTPS
    ecr_endpoint -[#blue]-> ecr: HTTPS
    ecr -[#blue]-> digideps_registry: HTTPS

    private -[#blue]-> s3_endpoint: HTTPS
    s3_endpoint -[#blue]-> s3: HTTPS
    s3 -[#blue]-> backup_bucket: HTTPS
    s3 -[#blue]-> pa_uploads_bucket: HTTPS
    s3 -[#blue]-> ecr_images_bucket: HTTPS


    'styling
    api_unit_test_task -[hidden]left-> integration_test_task
    integration_test_task -[hidden]left-> backup_task
    frontend -[hidden]left-> tasks
@enduml
