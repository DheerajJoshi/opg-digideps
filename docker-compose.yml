# To change/add variables on live environments, submit a PR here
# https://gitlab.service.opg.digital/opsforks/opg-digi-deps-deploy/tree/master/pillar

version: '2'

services:
    router:
        image: jwilder/nginx-proxy
        ports:
            - 443:443
        depends_on:
            - admin
            - localstack
        restart: always
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./.certs:/etc/nginx/certs
            - ./docker/router/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro

    aws:
        image: infrastructureascode/aws-cli
        environment:
            - AWS_ACCESS_KEY_ID=foo
            - AWS_SECRET_ACCESS_KEY=bar
        working_dir: /app
        volumes:
            - .:/app
        depends_on:
            - localstack

    localstack:
        image: localstack/localstack:0.9.1
        ports:
            - 4572:4572
        environment:
            - SERVICES=s3:4572
            - DATA_DIR=/tmp/localstack/data
            - DEFAULT_REGION=eu-west-1
            - DEBUG=1
        volumes:
            - ./docker/localstack-s3-init.sh:/docker-entrypoint-initaws.d/s3-init.sh

    frontend:
        build:
            context: ./client
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_FRONTEND} # set REQUIRE_XDEBUG_FRONTEND=true in .env to install Xdebug
        ports:
            - 8070:443
        depends_on:
            - api
            - redisfront
            - wkhtmltopdf
            - router
            - file-scanner-api
            - localstack

        volumes_from:
            - testresults
        volumes:
            - ./client/app/config/security.yml:/var/www/app/config/security.yml
            - ./client/app/config/config.yml:/var/www/app/config/config.yml
            - ./client/app/config/services.yml:/var/www/app/config/services.yml
            - ./client/app/config/services:/var/www/app/config/services
            - ./client/src:/var/www/src:ro
            - ./client/scripts:/var/www/scripts
            - ./client/tests:/var/www/tests
        environment:
            VIRTUAL_HOST: www.digideps.local,digideps.local
            VIRTUAL_PROTO: https
            VIRTUAL_PORT: 443
        env_file:
            - ./client/docker/env/frontend.env
        restart: always
        networks:
            default:
                aliases:
                    - www.digideps.local
                    - digideps.local
    admin:
        build:
            context: ./client
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_FRONTEND} # set REQUIRE_XDEBUG_FRONTEND=true in .env to install Xdebug
        ports:
            - 8080:443
        depends_on:
            - api
            - redisadmin
        volumes:
            - ./client/app/config/security.yml:/var/www/app/config/security.yml
            - ./client/app/config/config.yml:/var/www/app/config/config.yml
            - ./client/app/config/services.yml:/var/www/app/config/services.yml
            - ./client/app/config/services:/var/www/app/config/services
            - ./client/src:/var/www/src:ro
            - ./client/scripts:/var/www/scripts
            - ./client/tests:/var/www/tests
        environment:
            VIRTUAL_HOST: admin.digideps.local
            VIRTUAL_PROTO: https
            VIRTUAL_PORT: 443
        env_file:
            - ./client/docker/env/frontend.env
            - ./client/docker/env/admin.env
        restart: always
        networks:
            default:
                aliases:
                    - admin.digideps.local
    api:
        build:
            context: ./api
            args:
                REQUIRE_XDEBUG: ${REQUIRE_XDEBUG_API} # set REQUIRE_XDEBUG_API=true in .env to install Xdebug
        ports:
            - 8090:443
        depends_on:
            - postgres
            - redisapi
        volumes:
            - ./api/app:/var/www/app
            - ./api/scripts:/var/www/scripts
            - ./api/src:/var/www/src:ro
            - ./api/tests:/var/www/tests
            - ./api/web:/var/www/web
        env_file:
            - ./api/docker/env/api.env
        environment:
            NGINX_LOG_LEVEL: warn
            OPG_NGINX_CLIENTMAXBODYSIZE: 10M
            OPG_NGINX_CLIENTBODYTIMEOUT: 120s
            OPG_NGINX_INDEX: app_dev.php
        restart: always

    postgres:
        image: postgres:9.6
        ports:
            - 5432:5432
        env_file:
            - ./api/docker/env/postgres.env
        environment:
            # use a different data directory to avoid using the old 9.3 version
            PGDATA: /var/lib/postgresql96/data
        restart: always

    redisfront:
        image: redis:2.8.21
        restart: always

    redisadmin:
        image: redis:2.8.21
        restart: always

    redisapi:
        image: redis:2.8.21
        restart: always

    test:
        build: ./behat
        depends_on:
            - postgres
            - frontend
            - admin
        volumes_from:
            - testresults
        volumes:
            - ./behat/tests:/var/www/tests
        env_file: ./behat/test.env

    testresults:
        image: busybox
        command: tail -f /dev/null
        volumes:
            - /tmp/behat

    wkhtmltopdf:
        image: registry.service.opg.digital/opguk/wkhtmlpdf:0.1.209
        restart: always

    file-scanner-api:
        container_name: file-scanner-api
        build: ../opg-file-scanner-service
        ports:
            - 8443:8443
        depends_on:
            - file-scanner-broker
            - file-scanner-worker
        volumes:
            - ./docker/log/api:/var/log
        environment:
            SERVICE_ENABLE_UWSGI: "yes"
            SSL_CERT_FILENAME: "/etc/ssl/self-signed.crt"
            SSL_KEY_FILENAME: "/etc/ssl/self-signed.key"
            REDIS_URL: "redis://file-scanner-broker:6379/0"

    file-scanner-worker:
        container_name: file-scanner-worker
        build: ../opg-file-scanner-service
        depends_on:
            - file-scanner-broker
        volumes:
            - ./docker/log/worker:/var/log
        environment:
            SERVICE_ENABLE_CELERY: "yes"
            SERVICE_ENABLE_FRESHCLAM: "yes"
            SERVICE_ENABLE_CLAMD: "yes"
            REDIS_URL: "redis://file-scanner-broker:6379/0"

    file-scanner-broker:
        container_name: file-scanner-broker
        image: redis:3.0.7-alpine

    npm:
        image: node:8-alpine
        working_dir: /app
        volumes:
            - ./client/:/app
        entrypoint: npm
        environment:
            NODE_ENV: production

    composerapi:
        image: composer
        volumes:
            - ./api/:/app

    composerfront:
        image: composer
        volumes:
            - ./client/:/app

