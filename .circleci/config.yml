version: 2.1

workflows:
  pull_request:
    jobs:
      - lint:
          name: lint terraform
          filters: { branches: { ignore: [ master ] } }

      - build:
          name: build pr
          semver_stage: --stage dev
          filters: { branches: { ignore: [ master ] } }

      - apply:
          name: apply environment
          requires: [ build pr, lint terraform ]
          filters: { branches: { ignore: [ master ] } }

      - run-task:
          name: backup environment
          requires: [ apply environment ]
          filters: { branches: { ignore: [ master ] } }
          task_name: backup

      - run-task:
          name: restore environment
          requires: [ backup environment ]
          filters: { branches: { ignore: [ master ] } }
          task_name: restore

      - run-task:
          name: reset environment
          requires: [ restore environment ]
          filters: { branches: { ignore: [ master ] } }
          task_name: reset-database

      - run-task:
          name: integration test
          requires: [ reset environment ]
          filters: { branches: { ignore: [ master ] } }
          task_name: integration-test

      - run-task:
          name: client unit test
          requires: [ restore environment  ]
          filters: { branches: { ignore: [ master ] } }
          task_name: client-unit-test

      - run-task:
          name: api unit test
          requires: [ restore environment ]
          filters: { branches: { ignore: [ master ] } }
          task_name: api-unit-test

      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [ api unit test, client unit test, integration test ]
          filters: { branches: { ignore: [ master ] } }

      - apply:
          name: destroy environment
          requires: [ approve destroy environment ]
          filters: { branches: { ignore: [ master ] } }
          tf_command: destroy

  master:
    jobs:
      - build:
          name: build master
          filters: { branches: { only: [ master ] } }

      - apply:
          name: apply shared-development
          requires: [ build master ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: development

      - apply:
          name: apply shared-preproduction
          requires: [ build master ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: preproduction

      - apply:
          name: apply master
          requires: [ apply shared-development, apply shared-preproduction ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: master

      - run-task:
          name: reset master
          requires: [ apply master ]
          filters: { branches: { only: [ master ] } }
          task_name: reset-database
          tf_workspace: master

      - run-task:
          name: integration test
          requires: [ reset master ]
          filters: { branches: { only: [ master ] } }
          task_name: integration-test
          tf_workspace: master

      - run-task:
          name: client unit test
          requires: [ apply master  ]
          filters: { branches: { only: [ master ] } }
          task_name: client-unit-test
          tf_workspace: master

      - run-task:
          name: api unit test
          requires: [ apply master ]
          filters: { branches: { only: [ master ] } }
          task_name: api-unit-test
          tf_workspace: master

      - apply:
          name: apply training
          requires: [ approve release to production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: training

      - apply:
          name: apply shared-production
          requires: [ api unit test, client unit test, integration test ]
          filters: { branches: { only: [ master ] } }
          tf_tier: shared
          tf_workspace: production

      - apply:
          name: apply preproduction
          requires: [ apply shared-production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: preprod

      - slack/approval-notification:
          name: approve release to production notification
          message: "Production is ready for release and pending approval"
          requires: [ apply preproduction ]
          filters: { branches: { only: [ master ] } }

      - approve:
          name: approve release to production
          type: approval
          requires: [ apply preproduction ]
          filters: { branches: { only: [ master ] } }

      - apply:
          name: apply production
          requires: [ approve release to production ]
          filters: { branches: { only: [ master ] } }
          tf_workspace: production02

      - run-task:
          name: backup production
          requires: [ apply production ]
          filters: { branches: { only: [ master ] } }
          task_name: backup
          tf_workspace: production02

      - run-task:
          name: restore production to preproduction
          requires: [ backup production ]
          filters: { branches: { only: [ master ] } }
          task_name: restore_from_production
          tf_workspace: preprod

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  slack: circleci/slack@3.3.0
  ecs_helper:
    commands:
      install:
        steps:
          - run:
              name: Install runner
              working_directory: ~/project/ecs_helper
              command: go install -mod vendor ./cmd/runner
          - run:
              name: Install stabilizer
              working_directory: ~/project/ecs_helper
              command: go install -mod vendor ./cmd/stabilizer
  terraform:
    executors:
      terraform:
        docker:
          - image: circleci/golang:1.12
        environment:
          TF_VERSION: 0.12.12
          TF_SHA256SUM: 67bc7a49c0946ad48b14cc6e95482fdd3e7e9f7dc6811f4ce6ff531fc565bd3a
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
    commands:
      install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
jobs:
  lint:
    executor: terraform/terraform
    steps:
      - checkout
      - terraform/install
      - run:
          name: terraform lint
          command: terraform fmt -diff -check -recursive

  apply:
    executor: terraform/terraform
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_tier:
        description: tier to alter - shared or environment
        default: environment
        type: string
      tf_command:
        description: terraform command
        default: apply
        type: string
    environment:
      TF_TIER: << parameters.tf_tier >>
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/<< parameters.tf_tier >>
    steps:
      - checkout:
          path: ~/project
      - terraform/install
      - ecs_helper/install
      - attach_workspace: { at: ~/project }
      - run:
          name: Initialize
          command: terraform init
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Apply
          command: terraform << parameters.tf_command >>
      - run:
          name: Output
          command: terraform output -json > terraform.output.json
      - run:
          name: Stabilize
          command: stabilizer

  client_integration_test:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    environment:
      TF_VAR_default_role: digideps-ci
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Reset database
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} reset-database-${TF_WORKSPACE}
      - run:
          name: Test Client
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-integration-${TF_WORKSPACE}
  client_unit_test:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    environment:
      TF_VAR_default_role: digideps-ci
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Test Client
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-front-${TF_WORKSPACE}
  api_unit_test:
    docker:
      - image: circleci/ruby
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    environment:
      TF_VAR_default_role: digideps-ci
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Bundle install
          command: bundle install
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Test API
          command: ruby deployer/run_task.rb test-${TF_WORKSPACE} test-api-${TF_WORKSPACE}
  build:
    docker:
      - image: circleci/python:2.7
    parameters:
      semver_stage:
        description: semver stage suffix
        default: ""
        type: string
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - setup_remote_docker
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - 6f:4b:55:76:0e:cd:27:7d:ad:c3:28:38:53:69:5c:32
      - checkout
      - run:
          name: Install semvertag
          command: sudo pip install https://github.com/ministryofjustice/semvertag/archive/master.zip
      - run:
          name: Bump version
          command: semvertag bump patch << parameters.semver_stage >> >> ~/project/VERSION
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Show version
          command: echo ${VERSION}
      - run:
          name: Tag git
          command: git tag ${VERSION}
      - run:
          name: Push git tags
          command: git push --tags
      - run:
          name: Docker login
          command: eval $(aws ecr get-login --region $AWS_REGION --no-include-email --profile digideps-ci)
      - run:
          name: Build images
          command: docker-compose -f docker-compose.ci.yml build --parallel
      - run:
          name: Push images
          command: docker-compose -f docker-compose.ci.yml push

  run-task:
    executor: terraform/terraform
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      task_name:
        description: name of task to run
        type: string
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project/environment
    steps:
      - checkout:
          path: ~/project
      - terraform/install
      - ecs_helper/install
      - run:
          name: Initialize
          command: terraform init
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Output
          command: terraform output -json > terraform.output.json
      - run:
          name: Run task
          command: runner -task << parameters.task_name >>
