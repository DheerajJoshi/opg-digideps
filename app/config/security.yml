services:
    # authenticator
    authenticator.token_header:
        class: AppBundle\Service\Auth\HeaderTokenAuthenticator
        public: false
    # user providers
#    user_provider.by_token.doctrine:
#        class: AppBundle\Service\Auth\UserProviders\UserByTokenDoctrine
#        arguments: [  @em, { "timeout_seconds": 1800 } ]
    user_provider.by_token.redis:
        class: AppBundle\Service\Auth\UserProviders\UserByTokenRedis
        arguments: [ @em, @snc_redis.default, @logger, { "timeout_seconds": 1800 } ]
    authService:
        class: AppBundle\Service\Auth\AuthService
        arguments: [ @service_container ]
    
parameters:
    get_user_by_token_provider.class: "user_provider.by_token.redis"

security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User: sha512
       
#    role_hierarchy:
#        ROLE_LAY_DEPUTY: []
#        ROLE_PROFESSIONAL_DEPUTY: []
#        ROLE_LOCAL_AUTHORITY_DEPUTY: []
#        ROLE_ADMIN: [ ROLE_ALLOWED_TO_SWITCH, ROLE_GUEST, ROLE_LAY_DEPUTY, ROLE_PROFESSIONAL_DEPUTY, ROLE_LOCAL_AUTHORITY_DEPUTY, ROLE_VISITOR ]

    providers:
        get_user_by_token_provider:
            id: %get_user_by_token_provider.class%

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        elb:
            pattern: ^/manage/
            security: false
        behat:
            pattern: ^/behat/
            security: false
        login:
            pattern:  ^/auth/login$
            security: false
        userRecreateToken:
            pattern: ^/user/recreate-token
            security: false
        userGetByToken:
            pattern: ^/user/get-by-token
            security: false
        # keep this one last so that the previous ones bypass the catch-all pattern below
        default:
            pattern: .*
            security: true
            simple_preauth:
                authenticator: authenticator.token_header
            provider: get_user_by_token_provider
            stateless:   true
            
#    access_control:
#        #temp. REMOVEME
#        - { path: ^/user/get-all, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/auth/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/manage , roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/ , roles: IS_AUTHENTICATED_FULLY }
        
        
