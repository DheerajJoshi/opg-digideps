services:
    kernel.listener.responseConverter:
        class: AppBundle\EventListener\RestInputOuputFormatter
        arguments: [ @serializer, @logger, ["json"], "json", "%kernel.debug%" ]
        tags:
            - { name: kernel.event_listener, event: kernel.view, method: onKernelView }            
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }      
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }      
    em:
        alias: doctrine.orm.entity_manager    
    # pass it into Swift_Mailer to always write email into disk rather than sending them
    mailSender:
        class: AppBundle\Service\Mailer\MailSender
        arguments: [ @service_container ]
    mailFactory:
        class: AppBundle\Service\Mailer\MailFactory
        arguments: [ @service_container ]
    mailer.transport.fileWriter:
        class: AppBundle\Service\Mailer\Transport\FileWriter
        arguments: [ "/tmp/dd_mail_mock" ]
    mailer.transport.smtp.default:
        class: Swift_SmtpTransport
        arguments: [ "%smtp_default_hostname%", "%smtp_default_port%" ]
        calls:
            - [ setEncryption, [ "tls"]]
            - [ setUsername, [ %smtp_default_user%]]
            - [ setPassword, [ %smtp_default_password%]]
    mailer.transport.smtp.secure:
        class: Swift_SmtpTransport
        arguments: [ "%smtp_secure_hostname%", "%smtp_secure_port%" ]
    userprovider:
        class: AppBundle\UserProvider\UserProvider
        arguments: [@doctrine.orm.entity_manager]
    user.query.filter:
        class: AppBundle\Service\UserQueryFilter
    componentsExtension:
        class: AppBundle\Twig\ComponentsExtension
        public: false
        arguments: [  @translator ]
        tags:
            - { name: twig.extension }
    user.selfRegistration:
        class: AppBundle\Service\UserRegistrationService
        arguments: [@doctrine.orm.entity_manager, @mailFactory, @mailSender]
